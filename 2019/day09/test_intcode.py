from intcode import Intcode
import pytest
from pyrsistent import pvector
from pyrsistent.typing import PVector
from typing import Tuple, List
from itertools import permutations, cycle


# Day 2 tests

@pytest.mark.parametrize("test_input,expected", 
    [('1,0,0,0,99', [2,0,0,0,99]),
     ('2,3,0,3,99', [2,3,0,6,99]),
     ('2,4,4,5,99,0', [2,4,4,5,99,9801]),
     ('1,1,1,4,99,5,6,0,99', [30,1,1,4,2,5,6,0,99])])
def test_day_2(test_input, expected):
    Intcode(test_input).run([]) == pvector(expected)



# Day 5 tests

def run_inputs(program, inputs):
    return [Intcode(program).run(pvector([input]))[-1]
            for input in inputs]

def test_eq8_pos():
    assert run_inputs('3,9,8,9,10,9,4,9,99,-1,8', [7, 8, 9]) == [0, 1, 0]
    
def test_lt8_pos():
    assert run_inputs('3,9,7,9,10,9,4,9,99,-1,8', [7, 8, 9]) == [1, 0, 0]
    
def test_eq8_imm():
    assert run_inputs('3,3,1108,-1,8,3,4,3,99', [7, 8, 9]) == [0, 1, 0]
    
def test_lt8_imm():
    assert run_inputs('3,3,1107,-1,8,3,4,3,99', [7, 8, 9]) == [1, 0, 0]
    
def test_jmp_pos():
    assert (run_inputs('3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9', [-1, 0, 1])
            == [1, 0, 1])

def test_jmp_imm():
    assert (run_inputs('3,3,1105,-1,9,1101,0,0,12,4,12,99,1', [-1, 0, 1])
            == [1, 0, 1])


# Day 7 tests

def run_phase_setting(phases: Tuple[int, ...], program: str) -> int:
    output = 0
    for phase in phases:
        code = Intcode(program)
        output = code.run(pvector([phase, output]))[-1]
    return output


def solve_part_1_day7(code: str) -> int:
    return max(run_phase_setting(phases, code)
               for phases in permutations(range(5)))


def run_phase_setting_2(phases: Tuple[int, ...], program: str) -> int:
    amps = [Intcode(program) for _ in range(5)]
    
    for i, phase in enumerate(phases):
        assert list(amps[i].run(pvector([phase]))) == []
        
    outputs: List[PVector[int]] = [pvector() for _ in range(5)]
    outputs[0] = amps[0].run(pvector([0]))
    
    # Input output 0 to amplifier 1 and carry on
    for i in cycle([1, 2, 3, 4, 0]):
        output = amps[i].run(outputs[i - 1 % 5])
        if output:
            outputs[i] = output
        else:
            break

    return outputs[-1][-1]
            

def solve_part_2_day7(code: str) -> int:
    return max(run_phase_setting_2(phases, code)
               for phases in permutations(range(5, 10)))    


test_data_1 = [
    ('3,15,3,16,1002,16,10,16,1,16,15,15,4,15,99,0,0',
        43210),
    ('3,23,3,24,1002,24,10,24,1002,23,-1,23,' 
        + '101,5,23,23,1,24,23,23,4,23,99,0,0',
        54321),
    ('3,31,3,32,1002,32,10,32,1001,31,-2,31,1007,31,0,33,' +
        '1002,33,7,33,1,33,31,31,1,32,31,31,4,31,99,0,0,0',
        65210)  
]

@pytest.mark.parametrize("test_input,expected", test_data_1)
def test_1(test_input, expected):
    assert solve_part_1_day7(test_input) == expected


test_data_2 = [
    ('3,26,1001,26,-4,26,3,27,1002,27,2,27,1,27,26,' +
     '27,4,27,1001,28,-1,28,1005,28,6,99,0,0,5',
     139629729),
    ('3,52,1001,52,-5,52,3,53,1,52,56,54,1007,54,5,55,1005,55,26,1001,54,'
     '-5,54,1105,1,12,1,53,54,53,1008,54,0,55,1001,55,1,55,2,53,55,53,4,'
     '53,1001,56,-1,56,1005,56,6,99,0,0,0,0,10',
     18216)
]

@pytest.mark.parametrize("test_input,expected", test_data_2)
def test_2(test_input, expected):
    assert solve_part_2_day7(test_input) == expected


# Day 9

def test_09_1_1():
    assert (
        Intcode('109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99')
        .run(pvector())
        == pvector([109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99]))

def test_09_1_2():
    assert (
        len(str(Intcode('1102,34915192,34915192,7,4,7,99,0').run(pvector())[0]))
        == 16)

def test_09_1_3():
    assert (
        Intcode('104,1125899906842624,99').run(pvector())[0]
        == 1125899906842624)

program = '1102,34463338,34463338,63,1007,63,34463338,63,1005,63,53,1101,3,0,1000,109,988,209,12,9,1000,209,6,209,3,203,0,1008,1000,1,63,1005,63,65,1008,1000,2,63,1005,63,904,1008,1000,0,63,1005,63,58,4,25,104,0,99,4,0,104,0,99,4,17,104,0,99,0,0,1102,35,1,1010,1102,1,33,1013,1101,0,715,1022,1102,1,20,1004,1102,1,24,1012,1101,36,0,1005,1101,0,655,1024,1102,32,1,1014,1101,0,499,1026,1102,1,242,1029,1101,0,25,1002,1101,0,27,1017,1101,708,0,1023,1101,0,21,1016,1101,0,28,1000,1101,0,492,1027,1102,34,1,1015,1102,29,1,1007,1102,247,1,1028,1101,0,39,1011,1102,1,31,1018,1102,1,0,1020,1102,1,37,1006,1101,1,0,1021,1102,26,1,1009,1102,1,38,1008,1101,30,0,1019,1102,1,23,1001,1102,650,1,1025,1101,22,0,1003,109,7,2101,0,-7,63,1008,63,29,63,1005,63,205,1001,64,1,64,1105,1,207,4,187,1002,64,2,64,109,-1,1202,-1,1,63,1008,63,35,63,1005,63,227,1106,0,233,4,213,1001,64,1,64,1002,64,2,64,109,17,2106,0,5,4,239,1105,1,251,1001,64,1,64,1002,64,2,64,109,-1,21108,40,39,-4,1005,1018,271,1001,64,1,64,1106,0,273,4,257,1002,64,2,64,109,-9,1206,8,285,1106,0,291,4,279,1001,64,1,64,1002,64,2,64,109,-13,2108,27,0,63,1005,63,307,1106,0,313,4,297,1001,64,1,64,1002,64,2,64,109,11,2101,0,-5,63,1008,63,37,63,1005,63,339,4,319,1001,64,1,64,1105,1,339,1002,64,2,64,109,13,21101,41,0,-9,1008,1015,41,63,1005,63,365,4,345,1001,64,1,64,1106,0,365,1002,64,2,64,109,-14,1201,-6,0,63,1008,63,22,63,1005,63,385,1106,0,391,4,371,1001,64,1,64,1002,64,2,64,109,-10,1202,3,1,63,1008,63,22,63,1005,63,417,4,397,1001,64,1,64,1105,1,417,1002,64,2,64,109,6,1207,-3,21,63,1005,63,437,1001,64,1,64,1105,1,439,4,423,1002,64,2,64,109,16,21107,42,41,-8,1005,1014,455,1105,1,461,4,445,1001,64,1,64,1002,64,2,64,109,-28,2107,24,7,63,1005,63,481,1001,64,1,64,1106,0,483,4,467,1002,64,2,64,109,33,2106,0,0,1001,64,1,64,1106,0,501,4,489,1002,64,2,64,109,-18,2108,38,-1,63,1005,63,519,4,507,1105,1,523,1001,64,1,64,1002,64,2,64,109,-3,1208,-4,25,63,1005,63,545,4,529,1001,64,1,64,1106,0,545,1002,64,2,64,109,12,21102,43,1,-8,1008,1010,43,63,1005,63,571,4,551,1001,64,1,64,1106,0,571,1002,64,2,64,109,-1,1207,-8,27,63,1005,63,593,4,577,1001,64,1,64,1106,0,593,1002,64,2,64,109,-7,21101,44,0,8,1008,1018,42,63,1005,63,617,1001,64,1,64,1105,1,619,4,599,1002,64,2,64,109,-4,1208,-1,39,63,1005,63,639,1001,64,1,64,1105,1,641,4,625,1002,64,2,64,109,13,2105,1,5,4,647,1106,0,659,1001,64,1,64,1002,64,2,64,109,4,1206,-3,673,4,665,1106,0,677,1001,64,1,64,1002,64,2,64,109,-22,21108,45,45,10,1005,1011,699,4,683,1001,64,1,64,1105,1,699,1002,64,2,64,109,29,2105,1,-7,1001,64,1,64,1105,1,717,4,705,1002,64,2,64,109,-19,21107,46,47,5,1005,1016,739,4,723,1001,64,1,64,1106,0,739,1002,64,2,64,109,-8,2102,1,2,63,1008,63,33,63,1005,63,763,1001,64,1,64,1106,0,765,4,745,1002,64,2,64,109,1,1201,-2,0,63,1008,63,25,63,1005,63,791,4,771,1001,64,1,64,1105,1,791,1002,64,2,64,109,16,1205,0,803,1105,1,809,4,797,1001,64,1,64,1002,64,2,64,109,-8,1205,9,827,4,815,1001,64,1,64,1106,0,827,1002,64,2,64,109,-4,2102,1,-3,63,1008,63,36,63,1005,63,853,4,833,1001,64,1,64,1106,0,853,1002,64,2,64,109,17,21102,47,1,-6,1008,1019,50,63,1005,63,877,1001,64,1,64,1105,1,879,4,859,1002,64,2,64,109,-29,2107,22,5,63,1005,63,897,4,885,1106,0,901,1001,64,1,64,4,64,99,21102,27,1,1,21101,0,915,0,1106,0,922,21201,1,25338,1,204,1,99,109,3,1207,-2,3,63,1005,63,964,21201,-2,-1,1,21101,942,0,0,1105,1,922,22102,1,1,-1,21201,-2,-3,1,21102,957,1,0,1106,0,922,22201,1,-1,-2,1105,1,968,21202,-2,1,-2,109,-3,2106,0,0'
    
def test_09_full():
    assert(
        Intcode(program).run(pvector([1]))[0] == 2955820355)
