#!/usr/bin/env python
# coding: utf-8

# # Day 23
# ## Part 1
# Represent the clockwise circle of cups as a graph.

# In[1]:


class Circle:
    def __init__(self, s):
        self.g = {}
        self.cups = [int(x) for x in s.strip()]
        for x, y in zip(self.cups, self.cups[1:] + self.cups[:1]):
            self.g[x] = y
        self.current = self.cups[0]
        
    def __repr__(self):
        result = f'({self.current})'
        next_cup = self.g[self.current]
        while next_cup != self.current:
            result = result + f', {next_cup}'
            next_cup = self.g[next_cup]
        return result
    
    def round(self):
        moved_cups = [self.g[self.current]]
        for _ in range(2):
            moved_cups.append(self.g[moved_cups[-1]])
        dest = self.current - 1
        while dest in moved_cups or dest < min(self.cups):
            dest -= 1
            if dest < min(self.cups):
                dest = max(self.cups)
        next_after_dest = self.g[dest]
        next_after_current = self.g[moved_cups[-1]]
        self.g[dest] = moved_cups[0]
        self.g[moved_cups[-1]] = next_after_dest
        self.g[self.current] = next_after_current
        self.current = next_after_current
        
    def state_after_1(self):
        result = ''
        next_cup = self.g[1]
        while next_cup != 1:
            result = result + str(next_cup)
            next_cup = self.g[next_cup]
        return result


# In[2]:


test_circle = Circle('389125467')
for i in range(1, 11):
    print(f'Round {i}: {test_circle}')
    test_circle.round()
print(f'Final: {test_circle}')


# In[3]:


test_circle.state_after_1()


# In[4]:


test_circle = Circle('389125467')
for i in range(100):
    test_circle.round()
test_circle.state_after_1()


# In[5]:


circle = Circle('653427918')
for i in range(100):
    circle.round()
circle.state_after_1()


# ## Part 2
# I can't immediately think of a shortcut, apart from memoising for loops which will take an insane amount of memory, so do the big calculation and hope it finishes in reasonable time.

# In[6]:


class Circle:
    def __init__(self, s):
        self.g = {}
        self.cups = [int(x) for x in s.strip()]
        self.cups = self.cups + list(range(max(self.cups) + 1, 1000000))
        for x, y in zip(self.cups, self.cups[1:] + self.cups[:1]):
            self.g[x] = y
        self.current = self.cups[0]
        
    def __repr__(self):
        result = f'({self.current})'
        next_cup = self.g[self.current]
        while next_cup != self.current:
            result = result + f', {next_cup}'
            next_cup = self.g[next_cup]
        return result
    
    def round(self):
        moved_cups = [self.g[self.current]]
        for _ in range(2):
            moved_cups.append(self.g[moved_cups[-1]])
        dest = self.current - 1
        while dest in moved_cups or dest < min(self.cups):
            dest -= 1
            if dest < 1:
                dest = 1000000
        next_after_dest = self.g[dest]
        next_after_current = self.g[moved_cups[-1]]
        self.g[dest] = moved_cups[0]
        self.g[moved_cups[-1]] = next_after_dest
        self.g[self.current] = next_after_current
        self.current = next_after_current
        
    def state_after_1(self):
        result = ''
        next_cup = self.g[1]
        return (next_cup, self.g[next_cup])


# In[ ]:


circle = Circle('653427918')
for i in range(10000000):
    circle.round()
result = circle.state_after_1()
print(result)

# In[ ]:




